{"version":3,"sources":["components/Cart/actions.ts","actions/index.ts","components/Cart/Entry/index.tsx","components/Cart/selectors.ts","components/Cart/index.tsx","components/Modal/index.tsx","components/ChangeModal/actions.ts","utils/validators.ts","components/ChangeModal/Input/index.tsx","components/ChangeModal/selectors.ts","components/ChangeModal/index.tsx","components/AddButton/index.tsx","components/Root/index.tsx","components/Cart/reducer.ts","components/ChangeModal/reducer.ts","reducers/modal.ts","reducers/index.ts","store.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["SAVE","actions","entry","action","id","vis","b","b_","with","EntryView","name","quantity","onChangeClick","onRemove","length","slice","className","onClick","cartSelector","state","cart","entries","Cart","useSelector","dispatch","useDispatch","map","key","appActions","Modal","children","onClose","CHANGE","TOUCH","field","value","error","validate","constraints","result","validator","filter","Boolean","message","undefined","Input","touched","normalize","props","changeModal","fields","useLayoutEffect","onChange","e","target","normalized","entrySelector","currentId","isValidSelector","Object","keys","every","isTouchedSelector","existsSelector","Set","toLowerCase","trim","ChangeModal","min","set","maxLength","valid","exists","onSubmit","preventDefault","stopPropagation","listActions","placeholder","autoFocus","has","isNaN","digits","replace","AddButton","uuid","Root","isModalVisible","modal","visible","initialState","rootReducer","combineReducers","type","index","findIndex","payload","store","createStore","composeWithDevTools","App","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.ee5c96a5.chunk.js","sourcesContent":["import {action, ActionType} from 'typesafe-actions';\nimport { Entry } from '../../types/Entry';\nexport const SAVE = 'CART/SAVE';\nexport const REMOVE = 'CART/REMOVE';\n\nexport const actions = {\n  save: (entry: Entry) => action(SAVE, {entry}),\n  remove: (id: string) => action(REMOVE, {id})\n};\n\nexport type Action = ActionType<typeof actions>;","import {action, ActionType} from 'typesafe-actions';\nimport { Entry } from '../types/Entry';\n\nexport const TOGGLE_MODAL = 'MODAL/TOGGLE';\n\nexport const actions = {\n  toggleModal: (vis: boolean, entry?: Entry) => action(TOGGLE_MODAL, {vis, entry})\n};\n\nexport type Action = ActionType<typeof actions>;","import React from 'react';\nimport b_ from 'b_';\nimport { Entry } from '../../../types/Entry';\n\nimport './styles.scss';\n\ninterface Props extends Entry {\n  onChangeClick: () => void\n  onRemove: () => void\n}\n\nconst b = b_.with('cart-entry');\n\nconst maxLength = 40;\n\nexport const EntryView: React.FC<Props> = ({ name, quantity, onChangeClick, onRemove }) =>\n  <tr>\n    {/* BUG 3: Отображать в таблице только первые 40 символов названия */}\n    {/* (https://docs.google.com/document/d/1q1_EJXL9x4BFuDHqSJpCgpg1T9f8DerypSzj-u4Wfvo/edit) */}\n    <td>{name.length < maxLength ? name : `${name.slice(0, maxLength)}...`}</td>\n    <td>{quantity}</td>\n    <td>\n      <button className={b('btn')} onClick={onChangeClick}>\n        <i className=\"fas fa-pen\" />\n      </button>\n    </td>\n    <td>\n      <button className={b('btn')} onClick={onRemove}>\n        <i className=\"fas fa-trash\" />\n      </button>\n    </td>\n  </tr>","import { RootState } from \"../../reducers\";\n\n// BUG 1: В таблице отображается только 20 последних строк - как с инвестидеями ))\n// (https://docs.google.com/document/d/1q1_EJXL9x4BFuDHqSJpCgpg1T9f8DerypSzj-u4Wfvo/edit)\nexport const cartSelector = (state: RootState) => state.cart.entries.slice(0, 20);\n\nexport const entriesSetSelector = (state: RootState) => \n  new Set(state.cart.entries.map(entry => entry.name.toLowerCase().trim()));","import React from 'react';\nimport b_ from 'b_';\nimport { actions } from './actions'\nimport {actions as appActions} from '../../actions';\nimport { EntryView } from './Entry';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { cartSelector } from './selectors';\n\nimport './styles.scss';\n\nconst b = b_.with('cart');\n\nexport const Cart: React.FC = () => {\n  const entries = useSelector(cartSelector);\n\n  const dispatch = useDispatch();\n\n  if(!entries.length) {\n    return <div className={b('empty')}>Empty</div>\n  }\n\n  return (\n    <table className={b()}>\n      <thead>\n        <tr>\n          <td>Name</td>\n          <td>Quantity</td>\n\n        </tr>\n      </thead>\n      <tbody>\n        {entries.map(entry =>\n          <EntryView\n            key={entry.id}\n            {...entry}\n            onChangeClick={() => dispatch(appActions.toggleModal(true, entry))}\n            onRemove={() => dispatch(actions.remove(entry.id))}\n          />)}\n      </tbody>\n    </table>\n  );\n}","import React from 'react';\nimport b_ from 'b_';\n\nimport './styles.scss';\n\ninterface Props {\n  onClose: () => void\n}\n\nconst b = b_.with('modal');\n\nexport const Modal: React.FC<Props> = ({ children, onClose }) =>\n  <>\n    <div className={b('overlay')} onClick={onClose} />\n    <div className={b()}>\n      <div onClick={onClose} className={b('close-btn')}>\n        <i className='fas fa-times' />\n      </div>\n      <div className={b('content')}>\n        {children}\n      </div>\n    </div>\n  </>","import { Entry } from \"../../types/Entry\";\nimport { action, ActionType } from \"typesafe-actions\";\n\nexport const CHANGE = 'CHANGE_MODAL/CHANGE';\nexport const TOUCH = 'CHANGE_MODAL/TOUCH';\n\ntype FieldName = keyof Omit<Entry, 'id'>;\n\nexport const actions = {\n  change: (field: FieldName, value: string, error?: string) => action(CHANGE, {field, value, error}),\n  touch: () => action(TOUCH)\n}\n\nexport type Action = ActionType<typeof actions>;","export interface Validator {\n  (value: string): false | { message: string }\n}\n\ninterface ValidatorFactory {\n  (...args: any[]): Validator\n}\n\nexport interface Constraints {\n  [fieldName: string]: Validator[]\n}\n\n// BUG 2: Не выводить ошибку о незаполненных обязательных полях на форме создания/редактирования.\n// (https://docs.google.com/document/d/1q1_EJXL9x4BFuDHqSJpCgpg1T9f8DerypSzj-u4Wfvo/edit)\nexport const notEmpty: ValidatorFactory = () => (value) => !value && { message: ' ' }; //must not be empty\n\nexport const maxLength: ValidatorFactory = (maxLength: number) => value => value.length > maxLength && { message: `max length is ${maxLength}` }\n\nexport const min: ValidatorFactory = (min: number) => value => !!value && +value <= min && {message: `must be greater than ${min}`}\n\nexport const unique: ValidatorFactory = (set: Set<string>) => value => !!value && set.has(value.toLowerCase().trim()) && { message: 'must be unique' }\n\nexport const number: ValidatorFactory = () => value => !!value && isNaN(+value) && {message: 'must be a number'};\n\nexport const validate = (constraints: Validator[], value: string) => {\n  const result = constraints\n    .map(validator => validator(value))\n    .filter(Boolean)[0];\n\n  return result ? result.message : undefined\n}","import React, { useLayoutEffect } from 'react';\nimport b_ from 'b_';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { actions } from '../actions';\nimport { Entry } from '../../../types/Entry';\nimport { RootState } from '../../../reducers';\nimport { Validator, validate } from '../../../utils/validators';\n\nimport './styles.scss';\n\ninterface Props extends React.InputHTMLAttributes<HTMLInputElement> {\n  name: keyof Omit<Entry, 'id'>\n  constraints: Validator[]\n  touched: boolean,\n  normalize?: (value: string) => string\n}\n\nconst b = b_.with('change-modal-input');\n\nexport const Input: React.FC<Props> = ({ name, constraints, touched, normalize, ...props }) => {\n  const { value, error } = useSelector((state: RootState) => state.changeModal.fields[name]);\n  const dispatch = useDispatch();\n\n  useLayoutEffect(() => {\n    dispatch(actions.change(name, value, validate(constraints, value)));\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\n\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n    const normalized = (normalize || ((value: string) => value))(value);\n    dispatch(actions.change(name, normalized, validate(constraints, normalized)));\n  }\n\n  return (\n    <div className={b()}>\n      <input \n        className={b('input')}\n        {...props} \n        name={name} \n        value={value || ''} \n        onChange={onChange}\n      />\n      {touched && error && <div className={b('error')}>{error}</div>}\n    </div>\n  );\n}","import { RootState } from \"../../reducers\";\n\nexport const entrySelector = (state: RootState) => ({\n  id: state.changeModal.currentId!,\n  name: state.changeModal.fields.name.value,\n  quantity: state.changeModal.fields.quantity.value\n})\n\nexport const isValidSelector = (state: RootState) => {\n  const {fields} = state.changeModal;\n\n  return (Object.keys(fields) as (keyof typeof fields)[]).every(key => !fields[key].error)\n}\n\n\nexport const isTouchedSelector = (state: RootState) => state.changeModal.touched;\n\nexport const existsSelector = (state: RootState) => {\n  const id = state.changeModal.currentId;\n\n  return new Set(state.cart.entries.filter(entry => entry.id !== id).map(entry => entry.name.toLowerCase().trim()));\n}","import React from 'react';\nimport b_ from 'b_';\nimport { actions as listActions } from '../Cart/actions'\nimport { Modal } from '../Modal';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions as appActions } from '../../actions';\nimport { actions } from './actions';\nimport { Input } from './Input';\nimport { isTouchedSelector, entrySelector, isValidSelector, existsSelector } from './selectors';\nimport { notEmpty, maxLength, unique, min, number } from '../../utils/validators';\n\nimport './styles.scss';\n\nconst b = b_.with('change-modal');\n\nexport const ChangeModal: React.FC = () => {\n\n  const entry = useSelector(entrySelector);\n  const touched = useSelector(isTouchedSelector)\n  const valid = useSelector(isValidSelector)\n  const exists = useSelector(existsSelector);\n\n  const dispatch = useDispatch();\n\n  const save = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if(!valid){\n      dispatch(actions.touch());\n      return;\n    }\n\n    dispatch(listActions.save({\n      ...entry,\n      name: entry.name.trim(),\n      quantity: +entry.quantity\n    }))\n    dispatch(appActions.toggleModal(false));\n  }\n\n  return (\n    <Modal onClose={() => dispatch(appActions.toggleModal(false))}>\n      <form onSubmit={save} className={b()}>\n        <fieldset>\n          <Input \n            name='name'\n            placeholder='Name'\n            autoFocus\n            touched={touched}\n            constraints={[notEmpty(), maxLength(128), unique(exists)]}\n          />\n          <Input\n            name='quantity'\n            placeholder='Quantity'\n            touched={touched}\n            constraints={[notEmpty(), number(), min(0)]}\n            normalize={digits}\n          />\n        </fieldset>\n        <button className={b('save-btn')}>Save</button>\n      </form>\n    </Modal>\n  )\n}\n\nconst digits = (value: string) => value.replace(/[^\\d]/g, '')","import React from 'react';\nimport b_ from 'b_';\nimport { useDispatch } from 'react-redux';\nimport { v4 as uuid } from 'uuid';\nimport { actions } from '../../actions'\n\nimport './styles.scss';\n\nconst b = b_.with('add-button');\n\nexport const AddButton: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const add = () => dispatch(actions.toggleModal(true, {\n    id: uuid(),\n    name: '',\n    quantity: 0\n  }));\n\n  return (\n    <button className={b()} onClick={add} >\n      +\n    </button>\n  );\n}\n\n","import React from 'react';\nimport b_ from 'b_';\nimport { useSelector } from 'react-redux';\nimport { Cart } from '../Cart';\nimport { RootState } from '../../reducers';\nimport { ChangeModal } from '../ChangeModal';\nimport { AddButton } from '../AddButton';\n\nimport './styles.scss';\n\nconst b = b_.with('root');\n\nexport const Root: React.FC = () => {\n  const isModalVisible = useSelector((state: RootState) => state.modal.visible);\n\n  return (\n    <div className={b()}>\n      <div className={b('container')}>\n      <h2>Shopping list</h2>\n        <div className={b('add-button')} >\n          <AddButton />\n        </div>\n        <Cart />\n        {isModalVisible && <ChangeModal />}\n      </div>\n    </div>);\n}\n\n","import {v4 as uuid} from 'uuid';\nimport { Entry } from \"../../types/Entry\";\nimport { Action, REMOVE, SAVE } from \"./actions\";\n\n\n\ninterface State {\n  entries: Entry[]\n}\n\nconst list: Entry[] = [{\n  id: uuid(),\n  name: 'Гречка',\n  quantity: 200\n}, {\n  id: uuid(),\n  name: 'Туалетная бумага',\n  quantity: 100\n}]\n\nconst initialState: State = {\n  entries: list\n}\n\nexport default function(state: State = initialState, action: Action): State {\n  switch(action.type) {\n    case SAVE: {\n      const index = state.entries.findIndex(entry => entry.id === action.payload.entry.id);\n      if(index >= 0){\n        return {\n          ...state,\n          entries: state.entries.map(entry => (\n            entry.id === action.payload.entry.id\n            ? action.payload.entry\n            : entry\n          ))\n        }\n      }\n      return {\n        ...state,\n        entries: [\n          action.payload.entry,\n          ...state.entries\n        ]\n      }\n    }\n    case  REMOVE: \n      return {\n        ...state,\n        entries: state.entries.filter(entry => entry.id !== action.payload.id)\n      }\n    default:\n      return state;\n  }\n}","import { TOGGLE_MODAL, Action as AppAction } from \"../../actions\";\nimport { CHANGE, Action, TOUCH } from './actions';\nimport { Entry } from \"../../types/Entry\";\n\ninterface Field {\n  value: string\n  error?: string\n}\n\ninterface State {\n  currentId?: string\n  touched: boolean\n  fields: { [name in keyof Omit<Entry, 'id'>]: Field }\n}\n\nconst initialState: State = {\n  touched: false,\n  fields: {\n    name: {\n      value: ''\n    },\n    quantity: {\n      value: ''\n    }\n  }\n}\n\nexport default function (state: State = initialState, action: AppAction | Action): State {\n  switch (action.type) {\n    case TOGGLE_MODAL:\n      if (action.payload.vis) {\n        const {entry} = action.payload\n        return {\n          ...initialState,\n          currentId: entry?.id,\n          fields: {\n            name: {\n              value: entry?.name || ''\n            },\n            quantity: {\n              value: entry && entry.quantity > 0 ? `${entry.quantity}` : ''\n            }\n          }\n        }\n      }\n      return state;\n\n    case TOUCH:\n      return {\n        ...state,\n        touched: true\n      };\n\n    case CHANGE:\n      return {\n        ...state,\n        fields: {\n          ...state.fields,\n          [action.payload.field]: {\n            ...state.fields[action.payload.field],\n            value: action.payload.value,\n            error: action.payload.error\n          }\n        }\n      }\n    default:\n      return state;\n  }\n}","import { TOGGLE_MODAL, Action } from '../actions';\n\ninterface State {\n  visible: boolean\n}\n\nconst initialState: State = {\n  visible: false\n}\n\nexport default function(state: State = initialState, action: Action): State {\n  switch(action.type) {\n    case TOGGLE_MODAL:\n      return {\n        ...state,\n        visible: action.payload.vis\n      }\n    default:\n      return state;\n  }\n}","import { StateType } from 'typesafe-actions';\nimport { combineReducers } from 'redux'\nimport cart from '../components/Cart/reducer';\nimport changeModal from '../components/ChangeModal/reducer';\nimport modal from './modal';\n\nexport const rootReducer =  combineReducers({\n  cart,\n  modal,\n  changeModal\n})\n\nexport type RootState = StateType<typeof rootReducer>;\n\n","import { createStore } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { rootReducer } from './reducers'\n\nconst initialState = {}\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools()\n)\n\nexport default store\n","import React from 'react';\nimport { Provider } from 'react-redux'\nimport { Root } from './components/Root';\nimport store from './store'\n\nimport './App.scss';\n\nconst App: React.FC = () =>\n  <Provider store={store}>\n    <div className=\"App\">\n      <Root />\n    </div>\n  </Provider>\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}